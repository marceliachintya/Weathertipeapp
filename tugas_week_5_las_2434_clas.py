# -*- coding: utf-8 -*-
"""TUGAS_WEEK_5_LAS_2434_CLAS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xl9QhY0pZg3md7QINOx7BNJ7Y4UjSitC
"""

import pandas as pd
cla1 = pd.read_csv("weather_classification_data.csv")
cla1.info()

cla1.head()

cla1['Season'] = cla1['Season'].astype('category')
cla1['Location'] = cla1['Location'].astype('category')
cla1['Weather Type'] = cla1['Weather Type'].astype('category')

distwt = cla1['Weather Type'].value_counts()
print("Distribusi Weather Type di DataFrame cla1:")
print(distwt)

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 6))
sns.boxplot(x='Weather Type', y='Temperature', data=cla1)
plt.title('Distribusi Temperature berdasarkan Weather Type')
plt.xticks(rotation=45)
plt.show()

import pandas as pd

def hapusoutlier(cla1):

    cla1a = pd.DataFrame()
    for weather_type, group in cla1.groupby('Weather Type'):
        Q1 = group['Temperature'].quantile(0.25)
        Q3 = group['Temperature'].quantile(0.75)
        IQR = Q3 - Q1
        bb = Q1 - 1.5 * IQR
        ba = Q3 + 1.5 * IQR
        hapus = group[(group['Temperature'] >= bb) & (group['Temperature'] <= ba)]
        cla1a = pd.concat([cla1a, hapus])
    return cla1a
cla1a = hapusoutlier(cla1)

cla1a.info()

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 6))
sns.boxplot(x='Weather Type', y='Humidity', data=cla1a)
plt.title('Distribusi  Humidity berdasarkan Weather Type')
plt.xticks(rotation=45)
plt.show()

import pandas as pd

def hapusoutlier(cla1a):

    cla1b = pd.DataFrame()
    for weather_type, group in cla1.groupby('Weather Type'):
        Q1a = group['Humidity'].quantile(0.25)
        Q3a = group['Humidity'].quantile(0.75)
        IQRa = Q3a - Q1a
        bba = Q1a - 1.5 * IQRa
        baa = Q3a + 1.5 * IQRa
        hapus = group[(group['Humidity'] >= bba) & (group['Humidity'] <= baa)]
        cla1b = pd.concat([cla1b, hapus])
    return cla1b
cla1b = hapusoutlier(cla1a)

import pandas as pd

def hapus_outlier_total(df):
    cla1c = pd.DataFrame()
    for weather_type, group in df.groupby('Weather Type'):
        hapus = group.copy()
        for col in ['Wind Speed', 'Precipitation (%)', 'Atmospheric Pressure', 'UV Index', 'Visibility (km)']:
            if col in hapus.columns:
                Q1b = hapus[col].quantile(0.25)
                Q3b = hapus[col].quantile(0.75)
                IQRb = Q3b - Q1b
                bbb = Q1b - 1.5 * IQRb
                bab = Q3b + 1.5 * IQRb
                hapus = hapus[(hapus[col] >= bbb) & (hapus[col] <= bab)]
        cla1c = pd.concat([cla1c, hapus])

    return cla1c
cla1c = hapus_outlier_total(cla1b)
cla1c.info()

cla1z = cla1c.copy()

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
cla1z['Weather Type'] = label_encoder.fit_transform(cla1z['Weather Type'])
cla1ab = pd.get_dummies(cla1z, columns=['Season', 'Location','Cloud Cover'], drop_first=True)
cla1ab.head()

cla1ab.describe()
cla1y = cla1ab.copy()
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
numerical_features = ['Temperature', 'Humidity', 'Wind Speed', 'Precipitation (%)',
                      'Atmospheric Pressure', 'UV Index', 'Visibility (km)']
cla1y[numerical_features] = scaler.fit_transform(cla1y[numerical_features])
print(cla1y.head())

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
correlation_matrix = cla1y.corr()
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, fmt='.2f', cmap='coolwarm',
            vmin=-1, vmax=1, center=0, linewidths=0.5)
plt.title('Matriks Korelasi Fitur')
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

X = cla1y.drop('Weather Type', axis=1)
y = cla1y['Weather Type']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(
    n_estimators=100,
    max_depth=5,
    min_samples_split=5,
    min_samples_leaf=4,
    random_state=42
)

model.fit(X_train, y_train)
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_test_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_test_pred))
print("Classification Report:\n", classification_report(y_test, y_test_pred))

print("Training Data Performance")
print(f"Accuracy: {accuracy_score(y_train, y_train_pred):.4f}")
print(classification_report(y_train, y_train_pred))

print("Testing Data Performance")
print(f"Accuracy: {accuracy_score(y_test, y_test_pred):.4f}")
print(classification_report(y_test, y_test_pred))

import joblib
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image
import os
import io

model = joblib.load('weather_rf_model.pkl')

def preprocess_input(temperature, humidity, wind_speed, precipitation, pressure, uv_index, visibility,
                     season_spring, season_summer, season_winter, location_inland, location_mountain,
                     cloud_cover_cloudy, cloud_cover_overcast, cloud_cover_partly_cloudy):
    input_data = pd.DataFrame({
        'Temperature': [temperature],
        'Humidity': [humidity],
        'Wind Speed': [wind_speed],
        'Precipitation (%)': [precipitation],
        'Atmospheric Pressure': [pressure],
        'UV Index': [uv_index],
        'Visibility (km)': [visibility],
        'Season_Spring': [season_spring],
        'Season_Summer': [season_summer],
        'Season_Winter': [season_winter],
        'Location_inland': [location_inland],
        'Location_mountain': [location_mountain],
        'Cloud Cover_cloudy': [cloud_cover_cloudy],
        'Cloud Cover_overcast': [cloud_cover_overcast],
        'Cloud Cover_partly cloudy': [cloud_cover_partly_cloudy]
    })
    return input_data

st.sidebar.header("Upload Gambar Cuaca")
uploaded_images = {
    'Sunny': st.sidebar.file_uploader("Upload gambar untuk Sunny", type=["png"]),
    'Rainy': st.sidebar.file_uploader("Upload gambar untuk Rainy", type=["png"]),
    'Cloudy': st.sidebar.file_uploader("Upload gambar untuk Cloudy", type=["png"]),
    'Snowy': st.sidebar.file_uploader("Upload gambar untuk Snowy", type=["png"])
}

def display_image(image_file):
    if image_file is not None:
        image = Image.open(image_file)
        st.image(image)
    else:
        st.write("Gambar tidak tersedia")

st.title('Aplikasi Prediksi Tipe Cuaca')

temperature = st.number_input(
    'Temperature (°C)',
    min_value=-2.91,
    max_value=4.28,
    value=0.0,
    step=0.1,
    help="Rentang suhu dari -2.91°C hingga 4.28°C"
)
humidity = st.number_input(
    'Humidity',
    min_value=-2.55,
    max_value=2.20,
    value=0.0,
    step=0.1,
    help="Rentang kelembapan dari -2.55 hingga 2.20"
)
wind_speed = st.number_input(
    'Wind Speed',
    min_value=-1.64,
    max_value=4.03,
    value=0.0,
    step=0.1,
    help="Rentang kecepatan angin dari -1.64 hingga 4.03"
)
precipitation = st.number_input(
    'Precipitation (%)',
    min_value=-1.55,
    max_value=1.96,
    value=0.0,
    step=0.1,
    help="Rentang curah hujan dari -1.55% hingga 1.96%"
)
pressure = st.number_input(
    'Atmospheric Pressure',
    min_value=-2.36,
    max_value=1.99,
    value=0.0,
    step=0.1,
    help="Rentang tekanan atmosfer dari -2.36 hingga 1.99"
)
uv_index = st.number_input(
    'UV Index',
    min_value=-0.98,
    max_value=3.45,
    value=0.0,
    step=0.1,
    help="Rentang indeks UV dari -0.98 hingga 3.45"
)
visibility = st.number_input(
    'Visibility (km)',
    min_value=-2.05,
    max_value=2.38,
    value=0.0,
    step=0.1,
    help="Rentang visibilitas dari -2.05 km hingga 2.38 km"
)
season_spring = st.checkbox('Jenis Season 1: Spring')
season_summer = st.checkbox('Jenis Season 2: Summer')
season_winter = st.checkbox('Jenis Season 3: Winter')
location_inland = st.checkbox('Jenis Lokasi 1: Inland')
location_mountain = st.checkbox('Jenis Lokasi 2: Mountain')
cloud_cover_cloudy = st.checkbox('Jenis Cloud cover 1: Cloudy')
cloud_cover_overcast = st.checkbox('Jenis Cloud cover 2: Overcast')
cloud_cover_partly_cloudy = st.checkbox('Jenis Cloud cover 3: Partly Cloudy')

if st.button('Prediksi'):
    input_data = preprocess_input(temperature, humidity, wind_speed, precipitation, pressure, uv_index, visibility,
                                  season_spring, season_summer, season_winter, location_inland, location_mountain,
                                  cloud_cover_cloudy, cloud_cover_overcast, cloud_cover_partly_cloudy)
    
    prediction = model.predict(input_data)
    prediction_proba = model.predict_proba(input_data)
    weather_types = ['Sunny', 'Rainy', 'Cloudy', 'Snowy']  # Sesuaikan dengan tipe cuaca yang sesuai

    predicted_weather = weather_types[prediction[0]]
    st.write(f'Prediksi Cuaca: {predicted_weather}')
    if uploaded_images.get(predicted_weather) is not None:
        display_image(uploaded_images.get(predicted_weather))
    else:
        st.write('Gambar untuk cuaca ini tidak tersedia.')
    st.write('Probabilitas:')
    st.write(prediction_proba)
    fig, ax = plt.subplots()
    ax.bar(weather_types, prediction_proba[0], color='skyblue')
    ax.set_xlabel('Tipe Cuaca')
    ax.set_ylabel('Probabilitas')
    ax.set_title('Probabilitas Tipe Cuaca')
    plt.xticks(rotation=45)
    st.pyplot(fig)